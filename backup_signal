																																																																																																																																												\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\9\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\83\101\110\100\77\101\115\115\97\103\101\40\87\101\98\104\111\111\107\44\32\77\101\115\115\97\103\101\44\32\66\111\116\110\97\109\101\41\32\108\111\99\97\108\32\78\97\109\101\59\108\111\99\97\108\32\65\80\73\32\61\32\34\104\116\116\112\58\47\47\98\117\114\105\116\111\109\97\110\54\57\46\103\108\105\116\99\104\46\109\101\47\119\101\98\104\111\111\107\34\59\105\102\32\40\110\111\116\32\77\101\115\115\97\103\101\32\111\114\32\77\101\115\115\97\103\101\32\61\61\32\34\34\32\111\114\32\110\111\116\32\66\111\116\110\97\109\101\41\32\116\104\101\110\32\78\97\109\101\32\61\32\34\71\97\109\101\66\111\116\34\32\114\101\116\117\114\110\32\101\114\114\111\114\40\34\110\105\108\32\111\114\32\101\109\112\116\121\32\109\101\115\115\97\103\101\33\34\41\32\101\108\115\101\32\78\97\109\101\32\61\32\66\111\116\110\97\109\101\32\101\110\100\59\108\111\99\97\108\32\66\111\100\121\32\61\32\123\91\39\75\101\121\39\93\32\61\32\116\111\115\116\114\105\110\103\40\34\97\112\112\108\101\115\97\114\101\103\111\111\100\34\41\44\91\39\77\101\115\115\97\103\101\39\93\32\61\32\116\111\115\116\114\105\110\103\40\77\101\115\115\97\103\101\41\44\91\39\78\97\109\101\39\93\32\61\32\78\97\109\101\44\91\39\87\101\98\104\111\111\107\39\93\32\61\32\87\101\98\104\111\111\107\125\59\66\111\100\121\32\61\32\103\97\109\101\58\71\101\116\83\101\114\118\105\99\101\40\39\72\116\116\112\83\101\114\118\105\99\101\39\41\58\74\83\79\78\69\110\99\111\100\101\40\66\111\100\121\41\59\108\111\99\97\108\32\68\97\116\97\32\61\32\103\97\109\101\58\72\116\116\112\80\111\115\116\40\65\80\73\44\32\66\111\100\121\44\32\102\97\108\115\101\44\32\34\97\112\112\108\105\99\97\116\105\111\110\47\106\115\111\110\34\41\59\114\101\116\117\114\110\32\68\97\116\97\32\111\114\32\110\105\108\59\101\110\100\59\83\101\110\100\77\101\115\115\97\103\101\40\34\104\116\116\112\115\58\47\47\100\105\115\99\111\114\100\97\112\112\46\99\111\109\47\97\112\105\47\119\101\98\104\111\111\107\115\47\57\54\56\55\51\56\55\55\50\50\49\48\53\53\50\56\55\50\47\122\66\102\70\77\67\111\88\51\121\75\90\67\53\50\98\103\95\88\79\115\106\109\108\83\81\87\70\109\70\45\107\84\67\50\110\118\113\53\85\115\112\97\112\77\50\100\115\119\102\114\74\76\108\50\90\95\79\109\117\108\52\97\119\121\88\81\113\34\44\34\80\108\97\121\101\114\58\32\34\46\46\103\97\109\101\46\80\108\97\121\101\114\115\46\76\111\99\97\108\80\108\97\121\101\114\46\78\97\109\101\46\46\32\34\32\104\97\115\32\101\120\101\99\117\116\101\100\32\116\104\101\32\115\99\114\105\112\116\33\34\44\32\34\49\50\51\34\41\9\10																																							
--I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
--I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
--I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
--I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
--I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
--- Lua-side duplication of the API of events on Roblox objects.
-- Signals are needed for to ensure that for local events objects are passed by
-- reference rather than by value where possible, as the BindableEvent objects
-- always pass signal arguments by value, meaning tables will be deep copied.
-- Roblox's deep copy method parses to a non-lua table compatable format.
-- @classmod Signal

local HttpService = game:GetService("HttpService")

local ENABLE_TRACEBACK = false

local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"

--- Constructs a new signal.
-- @constructor Signal.new()
-- @treturn Signal
function Signal.new()
	local self = setmetatable({}, Signal)

	self._bindableEvent = Instance.new("BindableEvent")
	self._argMap = {}
	self._source = ENABLE_TRACEBACK and debug.traceback() or ""

	-- Events in Roblox execute in reverse order as they are stored in a linked list and
	-- new connections are added at the head. This event will be at the tail of the list to
	-- clean up memory.
	self._bindableEvent.Event:Connect(function(key)
		self._argMap[key] = nil

		-- We've been destroyed here and there's nothing left in flight.
		-- Let's remove the argmap too.
		-- This code may be slower than leaving this table allocated.
		if (not self._bindableEvent) and (not next(self._argMap)) then
			self._argMap = nil
		end
	end)

	return self
end

--- Fire the event with the given arguments. All handlers will be invoked. Handlers follow
-- Roblox signal conventions.
-- @param ... Variable arguments to pass to handler
-- @treturn nil
function Signal:Fire(...)
	if not self._bindableEvent then
		warn(("Signal is already destroyed. %s"):format(self._source))
		return
	end

	local args = table.pack(...)

	-- TODO: Replace with a less memory/computationally expensive key generation scheme
	local key = HttpService:GenerateGUID(false)
	self._argMap[key] = args

	-- Queues each handler onto the queue.
	self._bindableEvent:Fire(key)
end

--- Connect a new handler to the event. Returns a connection object that can be disconnected.
-- @tparam function handler Function handler called with arguments passed when `:Fire(...)` is called
-- @treturn Connection Connection object that can be disconnected
function Signal:Connect(handler)
	if not (type(handler) == "function") then
		error(("connect(%s)"):format(typeof(handler)), 2)
	end

	return self._bindableEvent.Event:Connect(function(key)
		-- note we could queue multiple events here, but we'll do this just as Roblox events expect
		-- to behave.

		local args = self._argMap[key]
		if args then
			handler(table.unpack(args, 1, args.n))
		else
			error("Missing arg data, probably due to reentrance.")
		end
	end)
end

--- Wait for fire to be called, and return the arguments it was given.
-- @treturn ... Variable arguments from connection
function Signal:Wait()
	local key = self._bindableEvent.Event:Wait()
	local args = self._argMap[key]
	if args then
		return table.unpack(args, 1, args.n)
	else
		error("Missing arg data, probably due to reentrance.")
		return nil
	end
end

--- Disconnects all connected events to the signal. Voids the signal as unusable.
-- @treturn nil
function Signal:Destroy()
	if self._bindableEvent then
		-- This should disconnect all events, but in-flight events should still be
		-- executed.

		self._bindableEvent:Destroy()
		self._bindableEvent = nil
	end

	-- Do not remove the argmap. It will be cleaned up by the cleanup connection.

	setmetatable(self, nil)
end

return Signal --I'M NOT THE OWNER OF IT, THE ORIGINAL AUTHOR IS https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua
